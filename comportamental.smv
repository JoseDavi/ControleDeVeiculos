MODULE main
VAR
	carro : {esperando, entrando, entrou};
	controle : controle(carro);
ASSIGN
	init(carro) := esperando;
	next(carro) :=
		case
			carro = esperando & (controle.cancela1 | controle.cancela2): entrando;
			carro = entrou | (carro = entrando & controle.cancela1): esperando;
			carro = entrando & !controle.cancela1 & !controle.cancela2: entrou;
			TRUE : carro;
		esac;
-- Impede que um carro entre enquanto o controle espera
SPEC AG ! (carro = entrando & controle.estado = esperando)

MODULE controle(carro)
VAR
	cancela1: boolean;
	cancela2: boolean;
	estado: {esperando, ocupado};
ASSIGN
	init(cancela1) := FALSE;
	init(cancela2) := FALSE;
	init(estado) := esperando;
	next(estado) :=
		case
			estado = esperando & carro = esperando : ocupado;
			estado = ocupado & carro = entrou : esperando;
			TRUE: estado;
		esac;
	next(cancela1) :=
		case
			estado = esperando & carro = esperando: TRUE;
			carro = entrando & !cancela2 : FALSE;
			TRUE: cancela1;
		esac;
	next(cancela2) :=
		case
			carro = entrando & estado = ocupado & !cancela1: FALSE;
			estado = ocupado & carro != entrou & !cancela1 : TRUE;
			TRUE: cancela2;
		esac;
-- Impede que as duas cancelas fiquem abertas ao mesmo tempo
SPEC AG ! (cancela1 = TRUE & cancela2 = TRUE)